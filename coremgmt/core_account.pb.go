// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core_account.proto

package coremgmt

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	libresp "github.com/pku-hit/libresp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoginRequest struct {
	//@inject_tag:validate:"required"
	LoginType string `protobuf:"bytes,1,opt,name=loginType,proto3" json:"loginType,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5696d94e9a910494, []int{0}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetLoginType() string {
	if m != nil {
		return m.LoginType
	}
	return ""
}

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SaveAccountRequest struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId    string `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	ParentEmail string `protobuf:"bytes,3,opt,name=parentEmail,proto3" json:"parentEmail,omitempty"`
	//@inject_tag:validate:"required"
	AccountType string `protobuf:"bytes,4,opt,name=accountType,proto3" json:"accountType,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	AccountFrom string `protobuf:"bytes,5,opt,name=accountFrom,proto3" json:"accountFrom,omitempty" validate:"required"`
	DeptCode    string `protobuf:"bytes,6,opt,name=deptCode,proto3" json:"deptCode,omitempty"`
	DeptName    string `protobuf:"bytes,7,opt,name=deptName,proto3" json:"deptName,omitempty"`
	//@inject_tag:validate:"required"
	Username             string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty" validate:"required"`
	Password             string   `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	Gender               string   `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`
	Phone                string   `protobuf:"bytes,11,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	AvatarUrl            string   `protobuf:"bytes,13,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	CreatedBy            string   `protobuf:"bytes,14,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveAccountRequest) Reset()         { *m = SaveAccountRequest{} }
func (m *SaveAccountRequest) String() string { return proto.CompactTextString(m) }
func (*SaveAccountRequest) ProtoMessage()    {}
func (*SaveAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5696d94e9a910494, []int{1}
}
func (m *SaveAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveAccountRequest.Merge(m, src)
}
func (m *SaveAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveAccountRequest proto.InternalMessageInfo

func (m *SaveAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SaveAccountRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *SaveAccountRequest) GetParentEmail() string {
	if m != nil {
		return m.ParentEmail
	}
	return ""
}

func (m *SaveAccountRequest) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

func (m *SaveAccountRequest) GetAccountFrom() string {
	if m != nil {
		return m.AccountFrom
	}
	return ""
}

func (m *SaveAccountRequest) GetDeptCode() string {
	if m != nil {
		return m.DeptCode
	}
	return ""
}

func (m *SaveAccountRequest) GetDeptName() string {
	if m != nil {
		return m.DeptName
	}
	return ""
}

func (m *SaveAccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SaveAccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SaveAccountRequest) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *SaveAccountRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SaveAccountRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SaveAccountRequest) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *SaveAccountRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type SaveAccountResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveAccountResponse) Reset()         { *m = SaveAccountResponse{} }
func (m *SaveAccountResponse) String() string { return proto.CompactTextString(m) }
func (*SaveAccountResponse) ProtoMessage()    {}
func (*SaveAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5696d94e9a910494, []int{2}
}
func (m *SaveAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveAccountResponse.Merge(m, src)
}
func (m *SaveAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveAccountResponse proto.InternalMessageInfo

func (m *SaveAccountResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AccountResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	ParentEmail          string   `protobuf:"bytes,3,opt,name=parentEmail,proto3" json:"parentEmail,omitempty"`
	AccountType          string   `protobuf:"bytes,4,opt,name=accountType,proto3" json:"accountType,omitempty"`
	AccountFrom          string   `protobuf:"bytes,5,opt,name=accountFrom,proto3" json:"accountFrom,omitempty"`
	DeptCode             string   `protobuf:"bytes,6,opt,name=deptCode,proto3" json:"deptCode,omitempty"`
	DeptName             string   `protobuf:"bytes,7,opt,name=deptName,proto3" json:"deptName,omitempty"`
	Username             string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	Gender               string   `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`
	Phone                string   `protobuf:"bytes,11,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	AvatarUrl            string   `protobuf:"bytes,13,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountResponse) Reset()         { *m = AccountResponse{} }
func (m *AccountResponse) String() string { return proto.CompactTextString(m) }
func (*AccountResponse) ProtoMessage()    {}
func (*AccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5696d94e9a910494, []int{3}
}
func (m *AccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountResponse.Merge(m, src)
}
func (m *AccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountResponse proto.InternalMessageInfo

func (m *AccountResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountResponse) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *AccountResponse) GetParentEmail() string {
	if m != nil {
		return m.ParentEmail
	}
	return ""
}

func (m *AccountResponse) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

func (m *AccountResponse) GetAccountFrom() string {
	if m != nil {
		return m.AccountFrom
	}
	return ""
}

func (m *AccountResponse) GetDeptCode() string {
	if m != nil {
		return m.DeptCode
	}
	return ""
}

func (m *AccountResponse) GetDeptName() string {
	if m != nil {
		return m.DeptName
	}
	return ""
}

func (m *AccountResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AccountResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AccountResponse) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *AccountResponse) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AccountResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountResponse) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

type LoginResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5696d94e9a910494, []int{4}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "coremgmt.LoginRequest")
	proto.RegisterType((*SaveAccountRequest)(nil), "coremgmt.SaveAccountRequest")
	proto.RegisterType((*SaveAccountResponse)(nil), "coremgmt.SaveAccountResponse")
	proto.RegisterType((*AccountResponse)(nil), "coremgmt.AccountResponse")
	proto.RegisterType((*LoginResponse)(nil), "coremgmt.LoginResponse")
}

func init() { proto.RegisterFile("core_account.proto", fileDescriptor_5696d94e9a910494) }

var fileDescriptor_5696d94e9a910494 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0x6f, 0xb6, 0x66, 0xdd, 0x7d, 0x69, 0x2b, 0x8c, 0xa5, 0x0c, 0xcb, 0x12, 0x96, 0x40, 0xc1,
	0x8b, 0x11, 0xf4, 0xd8, 0x93, 0x2d, 0x5a, 0x04, 0xe9, 0xa1, 0xea, 0xc5, 0x4b, 0x99, 0x66, 0x1e,
	0x31, 0x98, 0xcc, 0xc4, 0xc9, 0x6c, 0xa5, 0x9f, 0x43, 0x10, 0x3f, 0x92, 0x47, 0x3f, 0x82, 0xac,
	0x9f, 0xc1, 0xbb, 0xcc, 0xbf, 0x6c, 0x56, 0x61, 0xbd, 0x78, 0xf4, 0x96, 0xdf, 0xef, 0xf7, 0xf2,
	0xde, 0x9b, 0xf7, 0x9b, 0x79, 0x40, 0x0a, 0xa9, 0xf0, 0x8a, 0x15, 0x85, 0x5c, 0x0a, 0x9d, 0xb7,
	0x4a, 0x6a, 0x49, 0x26, 0x86, 0x6b, 0xca, 0x46, 0xcf, 0x16, 0x75, 0x75, 0xad, 0xb0, 0x6b, 0xaf,
	0xac, 0xf0, 0xa8, 0xe9, 0xca, 0x87, 0x06, 0x4a, 0xd1, 0xa1, 0x8b, 0xcd, 0x38, 0xec, 0xbd, 0x94,
	0x65, 0x25, 0x2e, 0xf1, 0xc3, 0x12, 0x3b, 0x4d, 0xe6, 0x30, 0xad, 0x0d, 0x7e, 0x7d, 0xdb, 0x22,
	0x8d, 0x16, 0xd1, 0x83, 0xe9, 0xe5, 0x9a, 0x20, 0x33, 0x98, 0x2c, 0x3b, 0x54, 0x82, 0x35, 0x48,
	0x47, 0x56, 0xec, 0xb1, 0xd1, 0x5a, 0xd6, 0x75, 0x1f, 0xa5, 0xe2, 0x74, 0xd7, 0x69, 0x01, 0x67,
	0x9f, 0x77, 0x81, 0xbc, 0x62, 0x37, 0xf8, 0xd4, 0xf5, 0x19, 0x8a, 0x1d, 0xc0, 0xa8, 0xe2, 0xbe,
	0xca, 0xa8, 0xe2, 0x2e, 0x85, 0x42, 0xa1, 0x5f, 0xf0, 0x90, 0x3e, 0x60, 0xb2, 0x80, 0xc4, 0x7d,
	0x3f, 0x6b, 0x58, 0x55, 0xfb, 0x0a, 0x43, 0xca, 0x44, 0xf8, 0x39, 0xd8, 0xe6, 0xef, 0xb8, 0x88,
	0x01, 0x35, 0x88, 0x78, 0xae, 0x64, 0x43, 0xe3, 0x8d, 0x08, 0x43, 0x99, 0x0e, 0x38, 0xb6, 0xfa,
	0x4c, 0x72, 0xa4, 0x63, 0xd7, 0x41, 0xc0, 0x41, 0xbb, 0x30, 0x87, 0xbf, 0xbb, 0xd6, 0x2e, 0xfc,
	0xe1, 0xfb, 0xc1, 0x4c, 0xb6, 0x0c, 0x66, 0xba, 0x39, 0x18, 0x72, 0x04, 0xe3, 0x12, 0x05, 0x47,
	0x45, 0xc1, 0x2a, 0x1e, 0x91, 0x43, 0x88, 0xdb, 0x77, 0x52, 0x20, 0x4d, 0x2c, 0xed, 0x80, 0x61,
	0xd1, 0x9e, 0x7e, 0xcf, 0xb1, 0x16, 0x18, 0xcb, 0xd8, 0x0d, 0xd3, 0x4c, 0xbd, 0x51, 0x35, 0xdd,
	0x77, 0x96, 0xf5, 0x84, 0x51, 0x0b, 0x85, 0x4c, 0x23, 0x3f, 0xbd, 0xa5, 0x07, 0x4e, 0xed, 0x89,
	0xec, 0x18, 0xee, 0x6f, 0xf8, 0xe2, 0xee, 0xc6, 0xef, 0xc6, 0x64, 0x3f, 0x47, 0x70, 0xef, 0x2f,
	0x31, 0xff, 0xcd, 0xfb, 0xf7, 0xe6, 0x65, 0xc7, 0xb0, 0xef, 0x5f, 0xa7, 0x1f, 0xfa, 0x21, 0xc4,
	0x5a, 0xbe, 0x47, 0xe1, 0xe7, 0xee, 0xc0, 0xe3, 0x4f, 0x11, 0x24, 0x67, 0x52, 0x05, 0x1b, 0xc9,
	0x09, 0xc4, 0xf6, 0x37, 0x72, 0x94, 0x87, 0x55, 0x90, 0x0f, 0x5f, 0xf9, 0x8c, 0xe6, 0x7e, 0x31,
	0xe4, 0xe7, 0x28, 0x50, 0x55, 0x45, 0x28, 0x90, 0xed, 0x90, 0x73, 0x48, 0x06, 0x57, 0x82, 0xcc,
	0xd7, 0x29, 0xfe, 0x7c, 0xc1, 0xdb, 0x12, 0x9d, 0xce, 0xbf, 0xae, 0xd2, 0xe8, 0xdb, 0x2a, 0x8d,
	0xbe, 0xaf, 0xd2, 0xe8, 0xcb, 0x8f, 0x74, 0xe7, 0x2d, 0xe4, 0x27, 0x21, 0xd9, 0xf5, 0xd8, 0xee,
	0x9f, 0x27, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x3a, 0x53, 0xe9, 0xc1, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreAccountClient is the client API for CoreAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreAccountClient interface {
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 新增或修改账号信息
	SaveAccount(ctx context.Context, in *SaveAccountRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
}

type coreAccountClient struct {
	cc *grpc.ClientConn
}

func NewCoreAccountClient(cc *grpc.ClientConn) CoreAccountClient {
	return &coreAccountClient{cc}
}

func (c *coreAccountClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreAccount/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAccountClient) SaveAccount(ctx context.Context, in *SaveAccountRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreAccount/SaveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreAccountServer is the server API for CoreAccount service.
type CoreAccountServer interface {
	// 登录
	Login(context.Context, *LoginRequest) (*libresp.GenericResponse, error)
	// 新增或修改账号信息
	SaveAccount(context.Context, *SaveAccountRequest) (*libresp.GenericResponse, error)
}

// UnimplementedCoreAccountServer can be embedded to have forward compatible implementations.
type UnimplementedCoreAccountServer struct {
}

func (*UnimplementedCoreAccountServer) Login(ctx context.Context, req *LoginRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedCoreAccountServer) SaveAccount(ctx context.Context, req *SaveAccountRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAccount not implemented")
}

func RegisterCoreAccountServer(s *grpc.Server, srv CoreAccountServer) {
	s.RegisterService(&_CoreAccount_serviceDesc, srv)
}

func _CoreAccount_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreAccount/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAccountServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAccount_SaveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAccountServer).SaveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreAccount/SaveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAccountServer).SaveAccount(ctx, req.(*SaveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreAccount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coremgmt.CoreAccount",
	HandlerType: (*CoreAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CoreAccount_Login_Handler,
		},
		{
			MethodName: "SaveAccount",
			Handler:    _CoreAccount_SaveAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core_account.proto",
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoginType) > 0 {
		i -= len(m.LoginType)
		copy(dAtA[i:], m.LoginType)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.LoginType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.AvatarUrl) > 0 {
		i -= len(m.AvatarUrl)
		copy(dAtA[i:], m.AvatarUrl)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.AvatarUrl)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeptName) > 0 {
		i -= len(m.DeptName)
		copy(dAtA[i:], m.DeptName)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.DeptName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DeptCode) > 0 {
		i -= len(m.DeptCode)
		copy(dAtA[i:], m.DeptCode)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.DeptCode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccountFrom) > 0 {
		i -= len(m.AccountFrom)
		copy(dAtA[i:], m.AccountFrom)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.AccountFrom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AccountType) > 0 {
		i -= len(m.AccountType)
		copy(dAtA[i:], m.AccountType)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.AccountType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentEmail) > 0 {
		i -= len(m.ParentEmail)
		copy(dAtA[i:], m.ParentEmail)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.ParentEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AvatarUrl) > 0 {
		i -= len(m.AvatarUrl)
		copy(dAtA[i:], m.AvatarUrl)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.AvatarUrl)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeptName) > 0 {
		i -= len(m.DeptName)
		copy(dAtA[i:], m.DeptName)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.DeptName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DeptCode) > 0 {
		i -= len(m.DeptCode)
		copy(dAtA[i:], m.DeptCode)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.DeptCode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccountFrom) > 0 {
		i -= len(m.AccountFrom)
		copy(dAtA[i:], m.AccountFrom)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.AccountFrom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AccountType) > 0 {
		i -= len(m.AccountType)
		copy(dAtA[i:], m.AccountType)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.AccountType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentEmail) > 0 {
		i -= len(m.ParentEmail)
		copy(dAtA[i:], m.ParentEmail)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.ParentEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCoreAccount(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoreAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoreAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoginType)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.ParentEmail)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.AccountType)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.AccountFrom)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.DeptCode)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.DeptName)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.AvatarUrl)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.ParentEmail)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.AccountType)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.AccountFrom)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.DeptCode)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.DeptName)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	l = len(m.AvatarUrl)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCoreAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCoreAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoreAccount(x uint64) (n int) {
	return sovCoreAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeptCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeptCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeptName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeptCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeptCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeptName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoreAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoreAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoreAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoreAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoreAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoreAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoreAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoreAccount = fmt.Errorf("proto: unexpected end of group")
)
