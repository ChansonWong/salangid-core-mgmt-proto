// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core_logic.proto

package coremgmt

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	libresp "github.com/pku-hit/libresp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogicGroupRequest struct {
	//@inject_tag:validate:"required"
	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty" validate:"required"`
	ParentId  string `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	//@inject_tag:validate:"required"
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	LogicGroupCode string `protobuf:"bytes,4,opt,name=logicGroupCode,proto3" json:"logicGroupCode,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	LogicGroupName string `protobuf:"bytes,5,opt,name=logicGroupName,proto3" json:"logicGroupName,omitempty" validate:"required"`
	Desc           string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	//@inject_tag:validate:"required"
	CreatedBy            string   `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogicGroupRequest) Reset()         { *m = LogicGroupRequest{} }
func (m *LogicGroupRequest) String() string { return proto.CompactTextString(m) }
func (*LogicGroupRequest) ProtoMessage()    {}
func (*LogicGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c2cfd71a376aeb, []int{0}
}
func (m *LogicGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicGroupRequest.Merge(m, src)
}
func (m *LogicGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogicGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogicGroupRequest proto.InternalMessageInfo

func (m *LogicGroupRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *LogicGroupRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *LogicGroupRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LogicGroupRequest) GetLogicGroupCode() string {
	if m != nil {
		return m.LogicGroupCode
	}
	return ""
}

func (m *LogicGroupRequest) GetLogicGroupName() string {
	if m != nil {
		return m.LogicGroupName
	}
	return ""
}

func (m *LogicGroupRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *LogicGroupRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type LogicGrpForAccountRequest struct {
	AccountId            string   `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	CreatedBy            string   `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	LogicGroupIds        []string `protobuf:"bytes,3,rep,name=logicGroupIds,proto3" json:"logicGroupIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogicGrpForAccountRequest) Reset()         { *m = LogicGrpForAccountRequest{} }
func (m *LogicGrpForAccountRequest) String() string { return proto.CompactTextString(m) }
func (*LogicGrpForAccountRequest) ProtoMessage()    {}
func (*LogicGrpForAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c2cfd71a376aeb, []int{1}
}
func (m *LogicGrpForAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicGrpForAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicGrpForAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicGrpForAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicGrpForAccountRequest.Merge(m, src)
}
func (m *LogicGrpForAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogicGrpForAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicGrpForAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogicGrpForAccountRequest proto.InternalMessageInfo

func (m *LogicGrpForAccountRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *LogicGrpForAccountRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *LogicGrpForAccountRequest) GetLogicGroupIds() []string {
	if m != nil {
		return m.LogicGroupIds
	}
	return nil
}

type LogicGrpForBusinessRequest struct {
	BusinessId           string   `protobuf:"bytes,1,opt,name=businessId,proto3" json:"businessId,omitempty"`
	CreatedBy            string   `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	LogicGroupIds        []string `protobuf:"bytes,3,rep,name=logicGroupIds,proto3" json:"logicGroupIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogicGrpForBusinessRequest) Reset()         { *m = LogicGrpForBusinessRequest{} }
func (m *LogicGrpForBusinessRequest) String() string { return proto.CompactTextString(m) }
func (*LogicGrpForBusinessRequest) ProtoMessage()    {}
func (*LogicGrpForBusinessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c2cfd71a376aeb, []int{2}
}
func (m *LogicGrpForBusinessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicGrpForBusinessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicGrpForBusinessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicGrpForBusinessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicGrpForBusinessRequest.Merge(m, src)
}
func (m *LogicGrpForBusinessRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogicGrpForBusinessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicGrpForBusinessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogicGrpForBusinessRequest proto.InternalMessageInfo

func (m *LogicGrpForBusinessRequest) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *LogicGrpForBusinessRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *LogicGrpForBusinessRequest) GetLogicGroupIds() []string {
	if m != nil {
		return m.LogicGroupIds
	}
	return nil
}

type LogicGroupResponse struct {
	AccountId            string   `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	LogicGroupCode       string   `protobuf:"bytes,4,opt,name=logicGroupCode,proto3" json:"logicGroupCode,omitempty"`
	LogicGroupName       string   `protobuf:"bytes,5,opt,name=logicGroupName,proto3" json:"logicGroupName,omitempty"`
	Desc                 string   `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatedBy            string   `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy            string   `protobuf:"bytes,8,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	DeletedBy            string   `protobuf:"bytes,9,opt,name=deletedBy,proto3" json:"deletedBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogicGroupResponse) Reset()         { *m = LogicGroupResponse{} }
func (m *LogicGroupResponse) String() string { return proto.CompactTextString(m) }
func (*LogicGroupResponse) ProtoMessage()    {}
func (*LogicGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c2cfd71a376aeb, []int{3}
}
func (m *LogicGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicGroupResponse.Merge(m, src)
}
func (m *LogicGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogicGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogicGroupResponse proto.InternalMessageInfo

func (m *LogicGroupResponse) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *LogicGroupResponse) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *LogicGroupResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LogicGroupResponse) GetLogicGroupCode() string {
	if m != nil {
		return m.LogicGroupCode
	}
	return ""
}

func (m *LogicGroupResponse) GetLogicGroupName() string {
	if m != nil {
		return m.LogicGroupName
	}
	return ""
}

func (m *LogicGroupResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *LogicGroupResponse) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *LogicGroupResponse) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *LogicGroupResponse) GetDeletedBy() string {
	if m != nil {
		return m.DeletedBy
	}
	return ""
}

func init() {
	proto.RegisterType((*LogicGroupRequest)(nil), "coremgmt.LogicGroupRequest")
	proto.RegisterType((*LogicGrpForAccountRequest)(nil), "coremgmt.LogicGrpForAccountRequest")
	proto.RegisterType((*LogicGrpForBusinessRequest)(nil), "coremgmt.LogicGrpForBusinessRequest")
	proto.RegisterType((*LogicGroupResponse)(nil), "coremgmt.LogicGroupResponse")
}

func init() { proto.RegisterFile("core_logic.proto", fileDescriptor_d2c2cfd71a376aeb) }

var fileDescriptor_d2c2cfd71a376aeb = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0xcd, 0xaa, 0xd3, 0x40,
	0x14, 0xbe, 0x49, 0xaf, 0xd7, 0xe6, 0x80, 0x72, 0x1d, 0x10, 0xc7, 0x58, 0x42, 0x89, 0x45, 0xba,
	0x31, 0x82, 0x2e, 0x5d, 0xb5, 0x05, 0x4b, 0x55, 0x5c, 0x74, 0x23, 0xba, 0x29, 0x69, 0xe6, 0x50,
	0x02, 0x49, 0x26, 0xce, 0x24, 0x8b, 0x2e, 0x04, 0x1f, 0xc0, 0x07, 0x70, 0xe9, 0xe3, 0xb8, 0xf4,
	0x11, 0xa4, 0x7d, 0x11, 0x99, 0x99, 0xfc, 0x35, 0x55, 0x70, 0xe1, 0xea, 0xee, 0x32, 0xdf, 0x77,
	0xe6, 0x3b, 0xdf, 0x39, 0x73, 0x4e, 0xe0, 0x3a, 0xe2, 0x02, 0x37, 0x09, 0xdf, 0xc5, 0x51, 0x90,
	0x0b, 0x5e, 0x70, 0x32, 0x54, 0x48, 0xba, 0x4b, 0x0b, 0x77, 0x9c, 0xc4, 0x5b, 0x81, 0x32, 0xdf,
	0x68, 0xe2, 0x59, 0x2a, 0x77, 0x4f, 0xd5, 0x91, 0x67, 0x12, 0x4d, 0xac, 0x7f, 0xb4, 0xe0, 0xde,
	0x5b, 0x75, 0x77, 0x29, 0x78, 0x99, 0xaf, 0xf1, 0x53, 0x89, 0xb2, 0x20, 0x23, 0x70, 0xc2, 0x28,
	0xe2, 0x65, 0x56, 0xac, 0x18, 0xb5, 0xc6, 0xd6, 0xd4, 0x59, 0xb7, 0x00, 0x71, 0x61, 0x98, 0x87,
	0x02, 0x35, 0x69, 0x6b, 0xb2, 0x39, 0x13, 0x02, 0x97, 0xc5, 0x3e, 0x47, 0x3a, 0xd0, 0xb8, 0xfe,
	0x26, 0x4f, 0xe0, 0x6e, 0xd2, 0xa4, 0x58, 0x70, 0x86, 0xf4, 0x52, 0xb3, 0x3d, 0xf4, 0x34, 0xee,
	0x5d, 0x98, 0x22, 0xbd, 0xd5, 0x8f, 0x53, 0xa8, 0xca, 0xc1, 0x50, 0x46, 0xf4, 0xca, 0xe4, 0x50,
	0xdf, 0xca, 0x71, 0x24, 0x30, 0x2c, 0x90, 0xcd, 0xf7, 0xf4, 0xb6, 0x71, 0xdc, 0x00, 0xfe, 0x67,
	0x78, 0x58, 0x15, 0x99, 0xbf, 0xe2, 0x62, 0x66, 0x2a, 0xf9, 0xb7, 0x62, 0x4f, 0x84, 0xed, 0x9e,
	0x30, 0x99, 0xc0, 0x9d, 0xd6, 0xdc, 0x8a, 0x49, 0x3a, 0x18, 0x0f, 0xa6, 0xce, 0xfa, 0x14, 0xf4,
	0xbf, 0x58, 0xe0, 0x76, 0xf2, 0xcf, 0x4b, 0x19, 0x67, 0x28, 0x65, 0x6d, 0xc0, 0x03, 0xd8, 0x56,
	0x50, 0xe3, 0xa0, 0x83, 0xfc, 0x17, 0x0b, 0xdf, 0x6d, 0x20, 0xdd, 0x77, 0x36, 0x43, 0x70, 0xd3,
	0x1e, 0x5a, 0xb1, 0x65, 0xce, 0x2a, 0x76, 0x68, 0xd8, 0x06, 0x50, 0x2c, 0xc3, 0x04, 0x0d, 0xeb,
	0x18, 0xb6, 0x01, 0x9e, 0x7f, 0xb5, 0xc1, 0x59, 0x70, 0x81, 0xba, 0x4d, 0xe4, 0x0d, 0x5c, 0x2f,
	0xb4, 0x6c, 0xdb, 0x35, 0xf2, 0x28, 0xa8, 0x37, 0x2b, 0x38, 0xdb, 0x19, 0x97, 0x06, 0xd5, 0xb2,
	0x05, 0x4b, 0xcc, 0x50, 0xc4, 0x51, 0xdd, 0x64, 0xff, 0x82, 0xbc, 0x87, 0x07, 0x33, 0xc6, 0xda,
	0x3b, 0xed, 0x10, 0x92, 0xc7, 0x67, 0x9a, 0xe7, 0x23, 0xea, 0xde, 0x6f, 0xb4, 0x5f, 0x4b, 0x9e,
	0x75, 0x84, 0x3f, 0x00, 0xed, 0x0b, 0xd7, 0xd3, 0x45, 0x26, 0x7f, 0x54, 0xee, 0x0d, 0xdf, 0x5f,
	0xa5, 0xe7, 0xa3, 0x1f, 0x07, 0xcf, 0xfa, 0x79, 0xf0, 0xac, 0x5f, 0x07, 0xcf, 0xfa, 0x76, 0xf4,
	0x2e, 0x3e, 0x42, 0xf0, 0xb2, 0x56, 0xdc, 0x5e, 0xe9, 0xdf, 0xc7, 0x8b, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x05, 0x96, 0xec, 0x7b, 0x7e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreLogicClient is the client API for CoreLogic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreLogicClient interface {
	// 创建逻辑分组
	CreateLogicGroup(ctx context.Context, in *LogicGroupRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 账号添加逻辑分组
	AddLogicGroupForAccount(ctx context.Context, in *LogicGrpForAccountRequest, opts ...grpc.CallOption) (*libresp.JsonResponse, error)
	// 业务添加逻辑分组
	AddLogicGroupForBusiness(ctx context.Context, in *LogicGrpForBusinessRequest, opts ...grpc.CallOption) (*libresp.JsonResponse, error)
}

type coreLogicClient struct {
	cc *grpc.ClientConn
}

func NewCoreLogicClient(cc *grpc.ClientConn) CoreLogicClient {
	return &coreLogicClient{cc}
}

func (c *coreLogicClient) CreateLogicGroup(ctx context.Context, in *LogicGroupRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreLogic/CreateLogicGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreLogicClient) AddLogicGroupForAccount(ctx context.Context, in *LogicGrpForAccountRequest, opts ...grpc.CallOption) (*libresp.JsonResponse, error) {
	out := new(libresp.JsonResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreLogic/AddLogicGroupForAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreLogicClient) AddLogicGroupForBusiness(ctx context.Context, in *LogicGrpForBusinessRequest, opts ...grpc.CallOption) (*libresp.JsonResponse, error) {
	out := new(libresp.JsonResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreLogic/AddLogicGroupForBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreLogicServer is the server API for CoreLogic service.
type CoreLogicServer interface {
	// 创建逻辑分组
	CreateLogicGroup(context.Context, *LogicGroupRequest) (*libresp.GenericResponse, error)
	// 账号添加逻辑分组
	AddLogicGroupForAccount(context.Context, *LogicGrpForAccountRequest) (*libresp.JsonResponse, error)
	// 业务添加逻辑分组
	AddLogicGroupForBusiness(context.Context, *LogicGrpForBusinessRequest) (*libresp.JsonResponse, error)
}

// UnimplementedCoreLogicServer can be embedded to have forward compatible implementations.
type UnimplementedCoreLogicServer struct {
}

func (*UnimplementedCoreLogicServer) CreateLogicGroup(ctx context.Context, req *LogicGroupRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogicGroup not implemented")
}
func (*UnimplementedCoreLogicServer) AddLogicGroupForAccount(ctx context.Context, req *LogicGrpForAccountRequest) (*libresp.JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogicGroupForAccount not implemented")
}
func (*UnimplementedCoreLogicServer) AddLogicGroupForBusiness(ctx context.Context, req *LogicGrpForBusinessRequest) (*libresp.JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogicGroupForBusiness not implemented")
}

func RegisterCoreLogicServer(s *grpc.Server, srv CoreLogicServer) {
	s.RegisterService(&_CoreLogic_serviceDesc, srv)
}

func _CoreLogic_CreateLogicGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreLogicServer).CreateLogicGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreLogic/CreateLogicGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreLogicServer).CreateLogicGroup(ctx, req.(*LogicGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreLogic_AddLogicGroupForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicGrpForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreLogicServer).AddLogicGroupForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreLogic/AddLogicGroupForAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreLogicServer).AddLogicGroupForAccount(ctx, req.(*LogicGrpForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreLogic_AddLogicGroupForBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicGrpForBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreLogicServer).AddLogicGroupForBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreLogic/AddLogicGroupForBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreLogicServer).AddLogicGroupForBusiness(ctx, req.(*LogicGrpForBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coremgmt.CoreLogic",
	HandlerType: (*CoreLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogicGroup",
			Handler:    _CoreLogic_CreateLogicGroup_Handler,
		},
		{
			MethodName: "AddLogicGroupForAccount",
			Handler:    _CoreLogic_AddLogicGroupForAccount_Handler,
		},
		{
			MethodName: "AddLogicGroupForBusiness",
			Handler:    _CoreLogic_AddLogicGroupForBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core_logic.proto",
}

func (m *LogicGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogicGroupName) > 0 {
		i -= len(m.LogicGroupName)
		copy(dAtA[i:], m.LogicGroupName)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.LogicGroupName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LogicGroupCode) > 0 {
		i -= len(m.LogicGroupCode)
		copy(dAtA[i:], m.LogicGroupCode)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.LogicGroupCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogicGrpForAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicGrpForAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicGrpForAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogicGroupIds) > 0 {
		for iNdEx := len(m.LogicGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LogicGroupIds[iNdEx])
			copy(dAtA[i:], m.LogicGroupIds[iNdEx])
			i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.LogicGroupIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogicGrpForBusinessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicGrpForBusinessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicGrpForBusinessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogicGroupIds) > 0 {
		for iNdEx := len(m.LogicGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LogicGroupIds[iNdEx])
			copy(dAtA[i:], m.LogicGroupIds[iNdEx])
			i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.LogicGroupIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BusinessId) > 0 {
		i -= len(m.BusinessId)
		copy(dAtA[i:], m.BusinessId)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.BusinessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogicGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedBy) > 0 {
		i -= len(m.DeletedBy)
		copy(dAtA[i:], m.DeletedBy)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.DeletedBy)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UpdatedBy) > 0 {
		i -= len(m.UpdatedBy)
		copy(dAtA[i:], m.UpdatedBy)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.UpdatedBy)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogicGroupName) > 0 {
		i -= len(m.LogicGroupName)
		copy(dAtA[i:], m.LogicGroupName)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.LogicGroupName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LogicGroupCode) > 0 {
		i -= len(m.LogicGroupCode)
		copy(dAtA[i:], m.LogicGroupCode)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.LogicGroupCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintCoreLogic(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoreLogic(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoreLogic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogicGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.LogicGroupCode)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.LogicGroupName)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicGrpForAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	if len(m.LogicGroupIds) > 0 {
		for _, s := range m.LogicGroupIds {
			l = len(s)
			n += 1 + l + sovCoreLogic(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicGrpForBusinessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BusinessId)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	if len(m.LogicGroupIds) > 0 {
		for _, s := range m.LogicGroupIds {
			l = len(s)
			n += 1 + l + sovCoreLogic(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.LogicGroupCode)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.LogicGroupName)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.UpdatedBy)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	l = len(m.DeletedBy)
	if l > 0 {
		n += 1 + l + sovCoreLogic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCoreLogic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoreLogic(x uint64) (n int) {
	return sovCoreLogic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogicGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreLogic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicGroupCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicGroupCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreLogic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicGrpForAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreLogic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicGrpForAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicGrpForAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicGroupIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicGroupIds = append(m.LogicGroupIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreLogic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicGrpForBusinessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreLogic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicGrpForBusinessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicGrpForBusinessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicGroupIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicGroupIds = append(m.LogicGroupIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreLogic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreLogic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicGroupCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicGroupCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreLogic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreLogic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreLogic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoreLogic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoreLogic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreLogic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoreLogic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoreLogic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoreLogic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoreLogic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoreLogic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoreLogic = fmt.Errorf("proto: unexpected end of group")
)
