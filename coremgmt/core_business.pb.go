// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core_business.proto

package coremgmt

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	libresp "github.com/pku-hit/libresp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterBusinessRequest struct {
	//@inject_tag:validate:"required"
	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	BusinessType string `protobuf:"bytes,2,opt,name=businessType,proto3" json:"businessType,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	BusinessCode string `protobuf:"bytes,3,opt,name=businessCode,proto3" json:"businessCode,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	BusinessName string `protobuf:"bytes,4,opt,name=businessName,proto3" json:"businessName,omitempty" validate:"required"`
	Desc         string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	//@inject_tag:validate:"required"
	CreatedBy            string   `protobuf:"bytes,6,opt,name=createdBy,proto3" json:"createdBy,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterBusinessRequest) Reset()         { *m = RegisterBusinessRequest{} }
func (m *RegisterBusinessRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterBusinessRequest) ProtoMessage()    {}
func (*RegisterBusinessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{0}
}
func (m *RegisterBusinessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterBusinessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterBusinessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterBusinessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterBusinessRequest.Merge(m, src)
}
func (m *RegisterBusinessRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterBusinessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterBusinessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterBusinessRequest proto.InternalMessageInfo

func (m *RegisterBusinessRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *RegisterBusinessRequest) GetBusinessType() string {
	if m != nil {
		return m.BusinessType
	}
	return ""
}

func (m *RegisterBusinessRequest) GetBusinessCode() string {
	if m != nil {
		return m.BusinessCode
	}
	return ""
}

func (m *RegisterBusinessRequest) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *RegisterBusinessRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RegisterBusinessRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type BusinessIdRequest struct {
	//@inject_tag:validate:"required"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BusinessIdRequest) Reset()         { *m = BusinessIdRequest{} }
func (m *BusinessIdRequest) String() string { return proto.CompactTextString(m) }
func (*BusinessIdRequest) ProtoMessage()    {}
func (*BusinessIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{1}
}
func (m *BusinessIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusinessIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusinessIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessIdRequest.Merge(m, src)
}
func (m *BusinessIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *BusinessIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessIdRequest proto.InternalMessageInfo

func (m *BusinessIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Biz为Business缩写
type BizLoginRequest struct {
	//@inject_tag:validate:"required"
	Appid string `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	Secret               string   `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizLoginRequest) Reset()         { *m = BizLoginRequest{} }
func (m *BizLoginRequest) String() string { return proto.CompactTextString(m) }
func (*BizLoginRequest) ProtoMessage()    {}
func (*BizLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{2}
}
func (m *BizLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizLoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizLoginRequest.Merge(m, src)
}
func (m *BizLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *BizLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BizLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BizLoginRequest proto.InternalMessageInfo

func (m *BizLoginRequest) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *BizLoginRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type BizEleRequest struct {
	ParentId string `protobuf:"bytes,1,opt,name=parentId,proto3" json:"parentId,omitempty"`
	//@inject_tag:validate:"required"
	BusinessIdFk string `protobuf:"bytes,2,opt,name=businessIdFk,proto3" json:"businessIdFk,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	ElementType string `protobuf:"bytes,3,opt,name=elementType,proto3" json:"elementType,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	ElementCode string `protobuf:"bytes,4,opt,name=elementCode,proto3" json:"elementCode,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	ElementName          string   `protobuf:"bytes,5,opt,name=elementName,proto3" json:"elementName,omitempty" validate:"required"`
	Desc                 string   `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatedBy            string   `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizEleRequest) Reset()         { *m = BizEleRequest{} }
func (m *BizEleRequest) String() string { return proto.CompactTextString(m) }
func (*BizEleRequest) ProtoMessage()    {}
func (*BizEleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{3}
}
func (m *BizEleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizEleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizEleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizEleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizEleRequest.Merge(m, src)
}
func (m *BizEleRequest) XXX_Size() int {
	return m.Size()
}
func (m *BizEleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BizEleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BizEleRequest proto.InternalMessageInfo

func (m *BizEleRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *BizEleRequest) GetBusinessIdFk() string {
	if m != nil {
		return m.BusinessIdFk
	}
	return ""
}

func (m *BizEleRequest) GetElementType() string {
	if m != nil {
		return m.ElementType
	}
	return ""
}

func (m *BizEleRequest) GetElementCode() string {
	if m != nil {
		return m.ElementCode
	}
	return ""
}

func (m *BizEleRequest) GetElementName() string {
	if m != nil {
		return m.ElementName
	}
	return ""
}

func (m *BizEleRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BizEleRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type DelBizEleRequest struct {
	//@inject_tag:validate:"required"
	ElementId            string   `protobuf:"bytes,1,opt,name=elementId,proto3" json:"elementId,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelBizEleRequest) Reset()         { *m = DelBizEleRequest{} }
func (m *DelBizEleRequest) String() string { return proto.CompactTextString(m) }
func (*DelBizEleRequest) ProtoMessage()    {}
func (*DelBizEleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{4}
}
func (m *DelBizEleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelBizEleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelBizEleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelBizEleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelBizEleRequest.Merge(m, src)
}
func (m *DelBizEleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelBizEleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelBizEleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelBizEleRequest proto.InternalMessageInfo

func (m *DelBizEleRequest) GetElementId() string {
	if m != nil {
		return m.ElementId
	}
	return ""
}

type BizElementGroupRequest struct {
	ElementGrpCode       string   `protobuf:"bytes,1,opt,name=elementGrpCode,proto3" json:"elementGrpCode,omitempty"`
	ElementGrpName       string   `protobuf:"bytes,2,opt,name=elementGrpName,proto3" json:"elementGrpName,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatedBy            string   `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizElementGroupRequest) Reset()         { *m = BizElementGroupRequest{} }
func (m *BizElementGroupRequest) String() string { return proto.CompactTextString(m) }
func (*BizElementGroupRequest) ProtoMessage()    {}
func (*BizElementGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{5}
}
func (m *BizElementGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizElementGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizElementGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizElementGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizElementGroupRequest.Merge(m, src)
}
func (m *BizElementGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *BizElementGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BizElementGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BizElementGroupRequest proto.InternalMessageInfo

func (m *BizElementGroupRequest) GetElementGrpCode() string {
	if m != nil {
		return m.ElementGrpCode
	}
	return ""
}

func (m *BizElementGroupRequest) GetElementGrpName() string {
	if m != nil {
		return m.ElementGrpName
	}
	return ""
}

func (m *BizElementGroupRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BizElementGroupRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type BizElementGroupMappingRequest struct {
	//@inject_tag:validate:"required"
	BusinessId string `protobuf:"bytes,1,opt,name=businessId,proto3" json:"businessId,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	ElementGroupIds []string `protobuf:"bytes,2,rep,name=elementGroupIds,proto3" json:"elementGroupIds,omitempty" validate:"required"`
	//@inject_tag:validate:"required"
	CreatedBy            string   `protobuf:"bytes,3,opt,name=createdBy,proto3" json:"createdBy,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizElementGroupMappingRequest) Reset()         { *m = BizElementGroupMappingRequest{} }
func (m *BizElementGroupMappingRequest) String() string { return proto.CompactTextString(m) }
func (*BizElementGroupMappingRequest) ProtoMessage()    {}
func (*BizElementGroupMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{6}
}
func (m *BizElementGroupMappingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizElementGroupMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizElementGroupMappingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizElementGroupMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizElementGroupMappingRequest.Merge(m, src)
}
func (m *BizElementGroupMappingRequest) XXX_Size() int {
	return m.Size()
}
func (m *BizElementGroupMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BizElementGroupMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BizElementGroupMappingRequest proto.InternalMessageInfo

func (m *BizElementGroupMappingRequest) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *BizElementGroupMappingRequest) GetElementGroupIds() []string {
	if m != nil {
		return m.ElementGroupIds
	}
	return nil
}

func (m *BizElementGroupMappingRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

// 业务查询返回
type BusinessResponse struct {
	AccountIdFk          string     `protobuf:"bytes,1,opt,name=accountIdFk,proto3" json:"accountIdFk,omitempty"`
	BusinessType         string     `protobuf:"bytes,2,opt,name=businessType,proto3" json:"businessType,omitempty"`
	BusinessCode         string     `protobuf:"bytes,3,opt,name=businessCode,proto3" json:"businessCode,omitempty"`
	BusinessName         string     `protobuf:"bytes,4,opt,name=businessName,proto3" json:"businessName,omitempty"`
	Status               string     `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Appid                string     `protobuf:"bytes,6,opt,name=appid,proto3" json:"appid,omitempty"`
	Desc                 string     `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	ConfirmAt            *time.Time `protobuf:"bytes,9,opt,name=confirmAt,proto3,stdtime" json:"confirmAt,omitempty"`
	CreatedBy            string     `protobuf:"bytes,10,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy            string     `protobuf:"bytes,11,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	DeletedBy            string     `protobuf:"bytes,12,opt,name=deletedBy,proto3" json:"deletedBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BusinessResponse) Reset()         { *m = BusinessResponse{} }
func (m *BusinessResponse) String() string { return proto.CompactTextString(m) }
func (*BusinessResponse) ProtoMessage()    {}
func (*BusinessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{7}
}
func (m *BusinessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusinessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusinessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessResponse.Merge(m, src)
}
func (m *BusinessResponse) XXX_Size() int {
	return m.Size()
}
func (m *BusinessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessResponse proto.InternalMessageInfo

func (m *BusinessResponse) GetAccountIdFk() string {
	if m != nil {
		return m.AccountIdFk
	}
	return ""
}

func (m *BusinessResponse) GetBusinessType() string {
	if m != nil {
		return m.BusinessType
	}
	return ""
}

func (m *BusinessResponse) GetBusinessCode() string {
	if m != nil {
		return m.BusinessCode
	}
	return ""
}

func (m *BusinessResponse) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *BusinessResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BusinessResponse) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *BusinessResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BusinessResponse) GetConfirmAt() *time.Time {
	if m != nil {
		return m.ConfirmAt
	}
	return nil
}

func (m *BusinessResponse) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *BusinessResponse) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *BusinessResponse) GetDeletedBy() string {
	if m != nil {
		return m.DeletedBy
	}
	return ""
}

// 业务appSecret
type BusinessAppSecretResponse struct {
	AppSecret            string   `protobuf:"bytes,1,opt,name=appSecret,proto3" json:"appSecret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BusinessAppSecretResponse) Reset()         { *m = BusinessAppSecretResponse{} }
func (m *BusinessAppSecretResponse) String() string { return proto.CompactTextString(m) }
func (*BusinessAppSecretResponse) ProtoMessage()    {}
func (*BusinessAppSecretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{8}
}
func (m *BusinessAppSecretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessAppSecretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusinessAppSecretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusinessAppSecretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessAppSecretResponse.Merge(m, src)
}
func (m *BusinessAppSecretResponse) XXX_Size() int {
	return m.Size()
}
func (m *BusinessAppSecretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessAppSecretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessAppSecretResponse proto.InternalMessageInfo

func (m *BusinessAppSecretResponse) GetAppSecret() string {
	if m != nil {
		return m.AppSecret
	}
	return ""
}

// 登录成功后获取的消息
type BizLoginResponse struct {
	AccessToken          string   `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn            int32    `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizLoginResponse) Reset()         { *m = BizLoginResponse{} }
func (m *BizLoginResponse) String() string { return proto.CompactTextString(m) }
func (*BizLoginResponse) ProtoMessage()    {}
func (*BizLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{9}
}
func (m *BizLoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizLoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizLoginResponse.Merge(m, src)
}
func (m *BizLoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *BizLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BizLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BizLoginResponse proto.InternalMessageInfo

func (m *BizLoginResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *BizLoginResponse) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

type BizElementResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	BusinessIdFk         string   `protobuf:"bytes,3,opt,name=businessIdFk,proto3" json:"businessIdFk,omitempty"`
	ElementType          string   `protobuf:"bytes,4,opt,name=elementType,proto3" json:"elementType,omitempty"`
	ElementCode          string   `protobuf:"bytes,5,opt,name=elementCode,proto3" json:"elementCode,omitempty"`
	ElementName          string   `protobuf:"bytes,6,opt,name=elementName,proto3" json:"elementName,omitempty"`
	ElementDesc          string   `protobuf:"bytes,7,opt,name=elementDesc,proto3" json:"elementDesc,omitempty"`
	CreateBy             string   `protobuf:"bytes,8,opt,name=createBy,proto3" json:"createBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizElementResponse) Reset()         { *m = BizElementResponse{} }
func (m *BizElementResponse) String() string { return proto.CompactTextString(m) }
func (*BizElementResponse) ProtoMessage()    {}
func (*BizElementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{10}
}
func (m *BizElementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizElementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizElementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizElementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizElementResponse.Merge(m, src)
}
func (m *BizElementResponse) XXX_Size() int {
	return m.Size()
}
func (m *BizElementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BizElementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BizElementResponse proto.InternalMessageInfo

func (m *BizElementResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BizElementResponse) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *BizElementResponse) GetBusinessIdFk() string {
	if m != nil {
		return m.BusinessIdFk
	}
	return ""
}

func (m *BizElementResponse) GetElementType() string {
	if m != nil {
		return m.ElementType
	}
	return ""
}

func (m *BizElementResponse) GetElementCode() string {
	if m != nil {
		return m.ElementCode
	}
	return ""
}

func (m *BizElementResponse) GetElementName() string {
	if m != nil {
		return m.ElementName
	}
	return ""
}

func (m *BizElementResponse) GetElementDesc() string {
	if m != nil {
		return m.ElementDesc
	}
	return ""
}

func (m *BizElementResponse) GetCreateBy() string {
	if m != nil {
		return m.CreateBy
	}
	return ""
}

type BizElementGroupResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ElementGroupCode     string   `protobuf:"bytes,2,opt,name=elementGroupCode,proto3" json:"elementGroupCode,omitempty"`
	ElementGroupName     string   `protobuf:"bytes,3,opt,name=elementGroupName,proto3" json:"elementGroupName,omitempty"`
	Desc                 string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Status               string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizElementGroupResponse) Reset()         { *m = BizElementGroupResponse{} }
func (m *BizElementGroupResponse) String() string { return proto.CompactTextString(m) }
func (*BizElementGroupResponse) ProtoMessage()    {}
func (*BizElementGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99879716e1b952fe, []int{11}
}
func (m *BizElementGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizElementGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizElementGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizElementGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizElementGroupResponse.Merge(m, src)
}
func (m *BizElementGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *BizElementGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BizElementGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BizElementGroupResponse proto.InternalMessageInfo

func (m *BizElementGroupResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BizElementGroupResponse) GetElementGroupCode() string {
	if m != nil {
		return m.ElementGroupCode
	}
	return ""
}

func (m *BizElementGroupResponse) GetElementGroupName() string {
	if m != nil {
		return m.ElementGroupName
	}
	return ""
}

func (m *BizElementGroupResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BizElementGroupResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterBusinessRequest)(nil), "coremgmt.RegisterBusinessRequest")
	proto.RegisterType((*BusinessIdRequest)(nil), "coremgmt.BusinessIdRequest")
	proto.RegisterType((*BizLoginRequest)(nil), "coremgmt.BizLoginRequest")
	proto.RegisterType((*BizEleRequest)(nil), "coremgmt.BizEleRequest")
	proto.RegisterType((*DelBizEleRequest)(nil), "coremgmt.DelBizEleRequest")
	proto.RegisterType((*BizElementGroupRequest)(nil), "coremgmt.BizElementGroupRequest")
	proto.RegisterType((*BizElementGroupMappingRequest)(nil), "coremgmt.BizElementGroupMappingRequest")
	proto.RegisterType((*BusinessResponse)(nil), "coremgmt.BusinessResponse")
	proto.RegisterType((*BusinessAppSecretResponse)(nil), "coremgmt.BusinessAppSecretResponse")
	proto.RegisterType((*BizLoginResponse)(nil), "coremgmt.BizLoginResponse")
	proto.RegisterType((*BizElementResponse)(nil), "coremgmt.BizElementResponse")
	proto.RegisterType((*BizElementGroupResponse)(nil), "coremgmt.BizElementGroupResponse")
}

func init() { proto.RegisterFile("core_business.proto", fileDescriptor_99879716e1b952fe) }

var fileDescriptor_99879716e1b952fe = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0x5e, 0xe7, 0x6b, 0x9b, 0xb7, 0xd9, 0xdd, 0x60, 0xe8, 0xd6, 0x6b, 0xba, 0xd9, 0xac, 0x91,
	0xa0, 0x42, 0x5a, 0x17, 0x2d, 0x27, 0x84, 0x04, 0x6a, 0x5a, 0x52, 0x05, 0x2d, 0x20, 0x42, 0x4f,
	0x7b, 0xa0, 0x4a, 0xec, 0x77, 0x8d, 0xd5, 0xd8, 0x63, 0x3c, 0xb6, 0x44, 0xf7, 0x0f, 0xc0, 0x91,
	0x13, 0x42, 0xfc, 0x07, 0xfe, 0x07, 0x47, 0x2e, 0x9c, 0x41, 0xe5, 0xc0, 0x9f, 0xe0, 0x80, 0x66,
	0xec, 0xf1, 0x7c, 0x84, 0x34, 0x12, 0x07, 0x6e, 0x99, 0x67, 0x9e, 0x79, 0xfc, 0x7e, 0xbf, 0x81,
	0x57, 0x03, 0x92, 0xe3, 0xc5, 0xb2, 0xa4, 0x71, 0x8a, 0x94, 0xfa, 0x59, 0x4e, 0x0a, 0x62, 0xef,
	0x30, 0x30, 0x89, 0x92, 0xc2, 0x1d, 0xaf, 0xe2, 0x65, 0x8e, 0x34, 0xbb, 0xe0, 0x17, 0x47, 0x09,
	0x8d, 0x9e, 0xb0, 0x23, 0x49, 0x29, 0x56, 0x5c, 0xf7, 0x51, 0x44, 0x48, 0xb4, 0xc2, 0x23, 0x7e,
	0x5a, 0x96, 0x2f, 0x8e, 0x8a, 0x38, 0x41, 0x5a, 0x2c, 0x92, 0xac, 0x26, 0x3c, 0x89, 0xe2, 0xe2,
	0xab, 0x72, 0xe9, 0x07, 0x24, 0x39, 0x8a, 0x48, 0x44, 0x24, 0x93, 0x9d, 0x2a, 0x5d, 0xf6, 0xab,
	0xa2, 0x7b, 0xbf, 0x59, 0xb0, 0x3f, 0xc7, 0x28, 0xa6, 0x05, 0xe6, 0x93, 0xda, 0xac, 0x39, 0x7e,
	0x5d, 0x22, 0x2d, 0xec, 0x03, 0xe8, 0x2f, 0x82, 0x80, 0x94, 0x69, 0x31, 0x0b, 0x1d, 0x6b, 0x6c,
	0x1d, 0xf6, 0xe7, 0x12, 0xb0, 0x3d, 0x18, 0x08, 0x3f, 0xce, 0xaf, 0x32, 0x74, 0x5a, 0x9c, 0xa0,
	0x61, 0x2a, 0xe7, 0x84, 0x84, 0xe8, 0xb4, 0x75, 0x0e, 0xc3, 0x54, 0xce, 0xa7, 0x8b, 0x04, 0x9d,
	0x8e, 0xce, 0x61, 0x98, 0x6d, 0x43, 0x27, 0x44, 0x1a, 0x38, 0x5d, 0x7e, 0xc7, 0x7f, 0x33, 0xeb,
	0x82, 0x1c, 0x17, 0x05, 0x86, 0x93, 0x2b, 0xa7, 0x57, 0x59, 0xd7, 0x00, 0xde, 0x1b, 0xf0, 0x8a,
	0x70, 0x67, 0x16, 0x0a, 0x87, 0xee, 0x42, 0x2b, 0x16, 0x9e, 0xb4, 0xe2, 0xd0, 0xfb, 0x10, 0xee,
	0x4d, 0xe2, 0x97, 0xcf, 0x48, 0x14, 0xa7, 0x82, 0xf2, 0x1a, 0x74, 0x17, 0x59, 0xd6, 0xb0, 0xaa,
	0x83, 0x7d, 0x1f, 0x7a, 0x14, 0x83, 0x1c, 0x8b, 0xda, 0xcb, 0xfa, 0xe4, 0xfd, 0x65, 0xc1, 0x9d,
	0x49, 0xfc, 0xf2, 0xa3, 0x15, 0x8a, 0xf7, 0x2e, 0xec, 0x64, 0x8b, 0x1c, 0x95, 0x90, 0x35, 0x67,
	0xd5, 0xd3, 0x59, 0x38, 0xbd, 0x34, 0x23, 0xc6, 0x30, 0x7b, 0x0c, 0xbb, 0xb8, 0xc2, 0x04, 0xd3,
	0x82, 0x07, 0xb5, 0x0a, 0x98, 0x0a, 0x29, 0x0c, 0x1e, 0xd2, 0x8e, 0xc6, 0xe0, 0x11, 0x95, 0x0c,
	0x1e, 0xd0, 0xae, 0xc6, 0xd0, 0xe2, 0xd9, 0xdb, 0x14, 0xcf, 0xdb, 0x66, 0x3c, 0xdf, 0x81, 0xe1,
	0x29, 0xae, 0x74, 0x5f, 0x0f, 0xa0, 0x5f, 0x8b, 0xca, 0xfa, 0x68, 0x00, 0xef, 0x27, 0x0b, 0xee,
	0x57, 0x7c, 0x06, 0x9c, 0xe5, 0xa4, 0xcc, 0xc4, 0xc3, 0x37, 0xe1, 0x2e, 0x0a, 0x38, 0xe3, 0x5e,
	0x54, 0xaf, 0x0d, 0x54, 0xe7, 0x71, 0x5f, 0x5a, 0x26, 0x4f, 0x73, 0xa7, 0xbd, 0xc9, 0x9d, 0x8e,
	0xe9, 0xce, 0xb7, 0x16, 0x3c, 0x34, 0x8c, 0xfb, 0x84, 0xa5, 0x3a, 0x8d, 0x84, 0x8d, 0x23, 0x00,
	0x99, 0x98, 0xda, 0x3e, 0x05, 0xb1, 0x0f, 0xe1, 0x1e, 0x2a, 0xaf, 0x67, 0x21, 0x75, 0x5a, 0xe3,
	0xf6, 0x61, 0x7f, 0x6e, 0xc2, 0xba, 0x25, 0x6d, 0xd3, 0x92, 0xbf, 0x5b, 0x30, 0x94, 0x8d, 0x57,
	0xf5, 0x3a, 0xcb, 0x60, 0xd3, 0x68, 0xd3, 0xcb, 0xfa, 0xeb, 0x2a, 0xf4, 0xbf, 0x76, 0x1f, 0xab,
	0xfe, 0x62, 0x51, 0x94, 0xb4, 0x2e, 0xa5, 0xfa, 0x24, 0x7b, 0xa5, 0xa7, 0xf6, 0x8a, 0x48, 0xc6,
	0x8e, 0x92, 0x8c, 0x0f, 0xa0, 0x1f, 0x90, 0xf4, 0x45, 0x9c, 0x27, 0xc7, 0x85, 0xd3, 0x1f, 0x5b,
	0x87, 0xbb, 0x4f, 0x5d, 0xbf, 0x9a, 0x64, 0xbe, 0x98, 0x4f, 0xfe, 0xb9, 0x98, 0x64, 0x93, 0xce,
	0xf7, 0xbf, 0x3f, 0xb2, 0xe6, 0xf2, 0x89, 0x1e, 0x42, 0x30, 0x42, 0xc8, 0x6e, 0xcb, 0x2c, 0xac,
	0x6f, 0x77, 0xab, 0xdb, 0x06, 0x60, 0xb7, 0x21, 0xae, 0xb0, 0xba, 0x1d, 0x54, 0xb7, 0x0d, 0xe0,
	0xbd, 0x07, 0x0f, 0x44, 0xf4, 0x8f, 0xb3, 0xec, 0x0b, 0xde, 0xd6, 0x4d, 0x1a, 0xd8, 0x00, 0x14,
	0x60, 0x33, 0x00, 0x05, 0xe0, 0x9d, 0xc3, 0x50, 0x4e, 0x8f, 0xfa, 0xc5, 0x63, 0x18, 0x2c, 0x82,
	0x00, 0x29, 0xbd, 0x28, 0xc8, 0x25, 0xa6, 0x4a, 0xe6, 0x58, 0x52, 0x18, 0x64, 0x3f, 0x04, 0xc0,
	0x6f, 0xb2, 0x38, 0x47, 0x7a, 0x11, 0xa7, 0x3c, 0x6f, 0xdd, 0x79, 0xbf, 0x46, 0x66, 0xa9, 0xf7,
	0x5d, 0x0b, 0x6c, 0x59, 0x99, 0x8d, 0xb0, 0x31, 0xba, 0xb4, 0x39, 0xd3, 0xda, 0x32, 0x67, 0xda,
	0xdb, 0xe7, 0x4c, 0x67, 0xeb, 0x9c, 0xe9, 0x6e, 0x9d, 0x33, 0xbd, 0xf5, 0x39, 0x23, 0x19, 0xa7,
	0xac, 0x24, 0x6e, 0x6b, 0x0c, 0x06, 0x31, 0x3f, 0xaa, 0x44, 0x4e, 0xae, 0xea, 0x8a, 0x69, 0xce,
	0xde, 0xcf, 0x16, 0xec, 0xaf, 0x4d, 0x90, 0x0d, 0xf1, 0x78, 0x1b, 0x86, 0x6a, 0xdf, 0x71, 0x93,
	0xab, 0xb8, 0xac, 0xe1, 0x26, 0x97, 0x1b, 0xdf, 0x5e, 0xe7, 0x6a, 0xa3, 0xa5, 0xa3, 0x54, 0xf3,
	0x86, 0x7e, 0x78, 0xfa, 0x43, 0x17, 0x06, 0x27, 0x24, 0x47, 0x51, 0x50, 0xf6, 0xe7, 0x30, 0x34,
	0x77, 0xab, 0xfd, 0xd8, 0x17, 0xdb, 0xde, 0xdf, 0xb0, 0x77, 0x5d, 0xc7, 0xaf, 0xff, 0x06, 0xf8,
	0x67, 0x98, 0x62, 0x1e, 0x07, 0xc2, 0x6b, 0xef, 0x96, 0x7d, 0x06, 0x83, 0x69, 0x9c, 0x86, 0x8d,
	0xdc, 0xeb, 0x52, 0x6e, 0x6d, 0xdf, 0x6d, 0x13, 0x3a, 0xc3, 0xa2, 0xa9, 0xf9, 0xff, 0x2e, 0x34,
	0x85, 0x3b, 0xe2, 0x01, 0xef, 0x05, 0xfb, 0x81, 0xa2, 0xa4, 0x6f, 0xd7, 0x1b, 0x75, 0x9e, 0xc1,
	0xde, 0x49, 0x95, 0xf9, 0x5a, 0xad, 0xce, 0xbb, 0xbd, 0xaf, 0xe9, 0xc9, 0xfd, 0x73, 0xa3, 0xda,
	0x67, 0xb0, 0x77, 0xca, 0x9b, 0xdc, 0x54, 0x73, 0xa5, 0x9a, 0xb9, 0xd0, 0x6e, 0x14, 0x7c, 0x0e,
	0xee, 0xbf, 0x9a, 0xc7, 0x4b, 0xc5, 0x1e, 0x9b, 0x36, 0x9a, 0x3b, 0xef, 0x46, 0xed, 0x2f, 0xc1,
	0x3d, 0x0e, 0x43, 0xf5, 0xd5, 0x94, 0xc8, 0x8a, 0x79, 0x6b, 0xa3, 0xb6, 0xbe, 0xb2, 0xdc, 0xbd,
	0xe6, 0x13, 0x1f, 0x53, 0x92, 0x4a, 0xfd, 0xc9, 0xc1, 0x2f, 0xd7, 0x23, 0xeb, 0xd7, 0xeb, 0x91,
	0xf5, 0xc7, 0xf5, 0xc8, 0xfa, 0xf1, 0xcf, 0xd1, 0xad, 0xe7, 0xe0, 0xbf, 0x2f, 0x44, 0x97, 0x3d,
	0x3e, 0x81, 0xdf, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x63, 0x8e, 0xaa, 0x31, 0x9c, 0x0a, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreBusinessClient is the client API for CoreBusiness service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreBusinessClient interface {
	// 注册业务应用信息
	RegisterBusiness(ctx context.Context, in *RegisterBusinessRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 查询业务信息
	FindBusiness(ctx context.Context, in *BusinessIdRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 生成业务AppSecret
	GetAppSecret(ctx context.Context, in *BusinessIdRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 业务应用登录或刷新
	BusinessLogin(ctx context.Context, in *BizLoginRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 创建业务元素
	CreateBusinessElement(ctx context.Context, in *BizEleRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 删除业务元素
	DeleteBusinessElement(ctx context.Context, in *DelBizEleRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 创建业务元素组
	CreateBusinessElementGroup(ctx context.Context, in *BizElementGroupRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
	// 业务添加业务员组关联
	AddElementGroupForBusiness(ctx context.Context, in *BizElementGroupMappingRequest, opts ...grpc.CallOption) (*libresp.JsonResponse, error)
}

type coreBusinessClient struct {
	cc *grpc.ClientConn
}

func NewCoreBusinessClient(cc *grpc.ClientConn) CoreBusinessClient {
	return &coreBusinessClient{cc}
}

func (c *coreBusinessClient) RegisterBusiness(ctx context.Context, in *RegisterBusinessRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/RegisterBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreBusinessClient) FindBusiness(ctx context.Context, in *BusinessIdRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/FindBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreBusinessClient) GetAppSecret(ctx context.Context, in *BusinessIdRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/GetAppSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreBusinessClient) BusinessLogin(ctx context.Context, in *BizLoginRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/BusinessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreBusinessClient) CreateBusinessElement(ctx context.Context, in *BizEleRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/CreateBusinessElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreBusinessClient) DeleteBusinessElement(ctx context.Context, in *DelBizEleRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/DeleteBusinessElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreBusinessClient) CreateBusinessElementGroup(ctx context.Context, in *BizElementGroupRequest, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/CreateBusinessElementGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreBusinessClient) AddElementGroupForBusiness(ctx context.Context, in *BizElementGroupMappingRequest, opts ...grpc.CallOption) (*libresp.JsonResponse, error) {
	out := new(libresp.JsonResponse)
	err := c.cc.Invoke(ctx, "/coremgmt.CoreBusiness/AddElementGroupForBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreBusinessServer is the server API for CoreBusiness service.
type CoreBusinessServer interface {
	// 注册业务应用信息
	RegisterBusiness(context.Context, *RegisterBusinessRequest) (*libresp.GenericResponse, error)
	// 查询业务信息
	FindBusiness(context.Context, *BusinessIdRequest) (*libresp.GenericResponse, error)
	// 生成业务AppSecret
	GetAppSecret(context.Context, *BusinessIdRequest) (*libresp.GenericResponse, error)
	// 业务应用登录或刷新
	BusinessLogin(context.Context, *BizLoginRequest) (*libresp.GenericResponse, error)
	// 创建业务元素
	CreateBusinessElement(context.Context, *BizEleRequest) (*libresp.GenericResponse, error)
	// 删除业务元素
	DeleteBusinessElement(context.Context, *DelBizEleRequest) (*libresp.GenericResponse, error)
	// 创建业务元素组
	CreateBusinessElementGroup(context.Context, *BizElementGroupRequest) (*libresp.GenericResponse, error)
	// 业务添加业务员组关联
	AddElementGroupForBusiness(context.Context, *BizElementGroupMappingRequest) (*libresp.JsonResponse, error)
}

// UnimplementedCoreBusinessServer can be embedded to have forward compatible implementations.
type UnimplementedCoreBusinessServer struct {
}

func (*UnimplementedCoreBusinessServer) RegisterBusiness(ctx context.Context, req *RegisterBusinessRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBusiness not implemented")
}
func (*UnimplementedCoreBusinessServer) FindBusiness(ctx context.Context, req *BusinessIdRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBusiness not implemented")
}
func (*UnimplementedCoreBusinessServer) GetAppSecret(ctx context.Context, req *BusinessIdRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSecret not implemented")
}
func (*UnimplementedCoreBusinessServer) BusinessLogin(ctx context.Context, req *BizLoginRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessLogin not implemented")
}
func (*UnimplementedCoreBusinessServer) CreateBusinessElement(ctx context.Context, req *BizEleRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessElement not implemented")
}
func (*UnimplementedCoreBusinessServer) DeleteBusinessElement(ctx context.Context, req *DelBizEleRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessElement not implemented")
}
func (*UnimplementedCoreBusinessServer) CreateBusinessElementGroup(ctx context.Context, req *BizElementGroupRequest) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessElementGroup not implemented")
}
func (*UnimplementedCoreBusinessServer) AddElementGroupForBusiness(ctx context.Context, req *BizElementGroupMappingRequest) (*libresp.JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddElementGroupForBusiness not implemented")
}

func RegisterCoreBusinessServer(s *grpc.Server, srv CoreBusinessServer) {
	s.RegisterService(&_CoreBusiness_serviceDesc, srv)
}

func _CoreBusiness_RegisterBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).RegisterBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/RegisterBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).RegisterBusiness(ctx, req.(*RegisterBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreBusiness_FindBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).FindBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/FindBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).FindBusiness(ctx, req.(*BusinessIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreBusiness_GetAppSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).GetAppSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/GetAppSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).GetAppSecret(ctx, req.(*BusinessIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreBusiness_BusinessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).BusinessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/BusinessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).BusinessLogin(ctx, req.(*BizLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreBusiness_CreateBusinessElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizEleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).CreateBusinessElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/CreateBusinessElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).CreateBusinessElement(ctx, req.(*BizEleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreBusiness_DeleteBusinessElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBizEleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).DeleteBusinessElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/DeleteBusinessElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).DeleteBusinessElement(ctx, req.(*DelBizEleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreBusiness_CreateBusinessElementGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizElementGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).CreateBusinessElementGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/CreateBusinessElementGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).CreateBusinessElementGroup(ctx, req.(*BizElementGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreBusiness_AddElementGroupForBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizElementGroupMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBusinessServer).AddElementGroupForBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coremgmt.CoreBusiness/AddElementGroupForBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBusinessServer).AddElementGroupForBusiness(ctx, req.(*BizElementGroupMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreBusiness_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coremgmt.CoreBusiness",
	HandlerType: (*CoreBusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBusiness",
			Handler:    _CoreBusiness_RegisterBusiness_Handler,
		},
		{
			MethodName: "FindBusiness",
			Handler:    _CoreBusiness_FindBusiness_Handler,
		},
		{
			MethodName: "GetAppSecret",
			Handler:    _CoreBusiness_GetAppSecret_Handler,
		},
		{
			MethodName: "BusinessLogin",
			Handler:    _CoreBusiness_BusinessLogin_Handler,
		},
		{
			MethodName: "CreateBusinessElement",
			Handler:    _CoreBusiness_CreateBusinessElement_Handler,
		},
		{
			MethodName: "DeleteBusinessElement",
			Handler:    _CoreBusiness_DeleteBusinessElement_Handler,
		},
		{
			MethodName: "CreateBusinessElementGroup",
			Handler:    _CoreBusiness_CreateBusinessElementGroup_Handler,
		},
		{
			MethodName: "AddElementGroupForBusiness",
			Handler:    _CoreBusiness_AddElementGroupForBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core_business.proto",
}

func (m *RegisterBusinessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterBusinessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterBusinessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BusinessName) > 0 {
		i -= len(m.BusinessName)
		copy(dAtA[i:], m.BusinessName)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BusinessCode) > 0 {
		i -= len(m.BusinessCode)
		copy(dAtA[i:], m.BusinessCode)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BusinessType) > 0 {
		i -= len(m.BusinessType)
		copy(dAtA[i:], m.BusinessType)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BusinessIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizLoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Appid) > 0 {
		i -= len(m.Appid)
		copy(dAtA[i:], m.Appid)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Appid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizEleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizEleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizEleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ElementName) > 0 {
		i -= len(m.ElementName)
		copy(dAtA[i:], m.ElementName)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ElementCode) > 0 {
		i -= len(m.ElementCode)
		copy(dAtA[i:], m.ElementCode)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ElementType) > 0 {
		i -= len(m.ElementType)
		copy(dAtA[i:], m.ElementType)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BusinessIdFk) > 0 {
		i -= len(m.BusinessIdFk)
		copy(dAtA[i:], m.BusinessIdFk)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessIdFk)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelBizEleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelBizEleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelBizEleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ElementId) > 0 {
		i -= len(m.ElementId)
		copy(dAtA[i:], m.ElementId)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizElementGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizElementGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizElementGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ElementGrpName) > 0 {
		i -= len(m.ElementGrpName)
		copy(dAtA[i:], m.ElementGrpName)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementGrpName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ElementGrpCode) > 0 {
		i -= len(m.ElementGrpCode)
		copy(dAtA[i:], m.ElementGrpCode)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementGrpCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizElementGroupMappingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizElementGroupMappingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizElementGroupMappingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ElementGroupIds) > 0 {
		for iNdEx := len(m.ElementGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ElementGroupIds[iNdEx])
			copy(dAtA[i:], m.ElementGroupIds[iNdEx])
			i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementGroupIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BusinessId) > 0 {
		i -= len(m.BusinessId)
		copy(dAtA[i:], m.BusinessId)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BusinessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedBy) > 0 {
		i -= len(m.DeletedBy)
		copy(dAtA[i:], m.DeletedBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.DeletedBy)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UpdatedBy) > 0 {
		i -= len(m.UpdatedBy)
		copy(dAtA[i:], m.UpdatedBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.UpdatedBy)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x52
	}
	if m.ConfirmAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ConfirmAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ConfirmAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintCoreBusiness(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Appid) > 0 {
		i -= len(m.Appid)
		copy(dAtA[i:], m.Appid)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Appid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BusinessName) > 0 {
		i -= len(m.BusinessName)
		copy(dAtA[i:], m.BusinessName)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BusinessCode) > 0 {
		i -= len(m.BusinessCode)
		copy(dAtA[i:], m.BusinessCode)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BusinessType) > 0 {
		i -= len(m.BusinessType)
		copy(dAtA[i:], m.BusinessType)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountIdFk) > 0 {
		i -= len(m.AccountIdFk)
		copy(dAtA[i:], m.AccountIdFk)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.AccountIdFk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BusinessAppSecretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessAppSecretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessAppSecretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppSecret) > 0 {
		i -= len(m.AppSecret)
		copy(dAtA[i:], m.AppSecret)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.AppSecret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizLoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizLoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizLoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiresIn != 0 {
		i = encodeVarintCoreBusiness(dAtA, i, uint64(m.ExpiresIn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizElementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizElementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizElementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreateBy) > 0 {
		i -= len(m.CreateBy)
		copy(dAtA[i:], m.CreateBy)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.CreateBy)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ElementDesc) > 0 {
		i -= len(m.ElementDesc)
		copy(dAtA[i:], m.ElementDesc)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementDesc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ElementName) > 0 {
		i -= len(m.ElementName)
		copy(dAtA[i:], m.ElementName)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ElementCode) > 0 {
		i -= len(m.ElementCode)
		copy(dAtA[i:], m.ElementCode)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ElementType) > 0 {
		i -= len(m.ElementType)
		copy(dAtA[i:], m.ElementType)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BusinessIdFk) > 0 {
		i -= len(m.BusinessIdFk)
		copy(dAtA[i:], m.BusinessIdFk)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.BusinessIdFk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizElementGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizElementGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizElementGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ElementGroupName) > 0 {
		i -= len(m.ElementGroupName)
		copy(dAtA[i:], m.ElementGroupName)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementGroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ElementGroupCode) > 0 {
		i -= len(m.ElementGroupCode)
		copy(dAtA[i:], m.ElementGroupCode)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.ElementGroupCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCoreBusiness(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoreBusiness(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoreBusiness(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterBusinessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessType)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessCode)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessName)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BusinessIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizLoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Appid)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizEleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessIdFk)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementType)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementCode)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementName)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelBizEleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ElementId)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizElementGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ElementGrpCode)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementGrpName)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizElementGroupMappingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BusinessId)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if len(m.ElementGroupIds) > 0 {
		for _, s := range m.ElementGroupIds {
			l = len(s)
			n += 1 + l + sovCoreBusiness(uint64(l))
		}
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BusinessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountIdFk)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessType)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessCode)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessName)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Appid)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.ConfirmAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ConfirmAt)
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.UpdatedBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.DeletedBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BusinessAppSecretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppSecret)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizLoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovCoreBusiness(uint64(m.ExpiresIn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizElementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.BusinessIdFk)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementType)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementCode)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementName)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementDesc)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.CreateBy)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizElementGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementGroupCode)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.ElementGroupName)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCoreBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCoreBusiness(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoreBusiness(x uint64) (n int) {
	return sovCoreBusiness(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterBusinessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterBusinessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterBusinessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizEleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizEleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizEleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessIdFk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessIdFk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelBizEleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelBizEleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelBizEleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizElementGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizElementGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizElementGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementGrpCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementGrpCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementGrpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementGrpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizElementGroupMappingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizElementGroupMappingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizElementGroupMappingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementGroupIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementGroupIds = append(m.ElementGroupIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIdFk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountIdFk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmAt == nil {
				m.ConfirmAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ConfirmAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessAppSecretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessAppSecretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessAppSecretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizLoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizElementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizElementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizElementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessIdFk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessIdFk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizElementGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizElementGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizElementGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementGroupCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementGroupCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoreBusiness(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoreBusiness
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreBusiness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoreBusiness
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoreBusiness
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoreBusiness
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoreBusiness        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoreBusiness          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoreBusiness = fmt.Errorf("proto: unexpected end of group")
)
